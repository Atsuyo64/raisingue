library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.std_logic_unsigned.all;

use IEEE.NUMERIC_STD.ALL;

entity Instruction_Memory is
    Port ( addr : in STD_LOGIC_VECTOR (7 downto 0);
--           CLK : in STD_LOGIC;
           --Press X to
           Dout : out STD_LOGIC_VECTOR (31 downto 0));
end Instruction_Memory;

architecture Behavioral of Instruction_Memory is
    subtype data_t is std_logic_vector(31 downto 0);
    type mem_t is array (0 to 255) of data_t;
    signal mem : mem_t := (x"00000000", -- NEVER CHANGE THIS !
x"06000000",
x"0a040000",
x"0b010400",
x"0a020100",
x"06000100",
x"0a040000",
x"0b010400",
x"0a030100",
x"06000100",
x"0a050000",
x"0b030500",
x"09000300",
x"08cd0000",
x"06000f00",
x"0a060000",
x"0b020600",
x"0d010200",
x"0a050100",
x"0b030500",
x"09000300",
x"081a0000",
x"06000100",
x"0a050000",
x"0b010500",
x"0a040100",
x"070d0000",
x"06000100",
x"0a050000",
x"0b070500",
x"0b080200",
x"0c000807",
x"06000200",
x"0a050000",
x"0b070500",
x"0b080300",
x"0c000807",
x"0b010300",
x"0b020200",
x"01000102",
x"0a050000",
x"0b010500",
x"0a010100",
x"0b010300",
x"0a020100",
x"0b010100",
x"0a030100",
x"06000100",
x"0a050000",
x"06000f00",
x"0a080000",
x"0b020800",
x"0d010200",
x"0a070100",
x"0b010500",
x"0b020700",
x"03000102",
x"0a060000",
x"0b030600",
x"09000300",
x"08410000",
x"06000200",
x"0a050000",
x"0b010500",
x"0a040100",
x"072e0000",
x"06000000",
x"0a070000",
x"0b020700",
x"0d010200",
x"0a060100",
x"06000200",
x"0a080000",
x"06000100",
x"0a0b0000",
x"0b020b00",
x"0d010200",
x"0a0a0100",
x"0b010800",
x"0b020a00",
x"02000102",
x"0a090000",
x"0b010600",
x"0b020900",
x"01000102",
x"0a070000",
x"06000400",
x"0a090000",
x"06000200",
x"0a0c0000",
x"0b020c00",
x"0d010200",
x"0a0b0100",
x"0b010900",
x"0b020b00",
x"02000102",
x"0a0a0000",
x"0b010700",
x"0b020a00",
x"01000102",
x"0a080000",
x"06000800",
x"0a0a0000",
x"06000300",
x"0a0d0000",
x"0b020d00",
x"0d010200",
x"0a0c0100",
x"0b010a00",
x"0b020c00",
x"02000102",
x"0a0b0000",
x"0b010800",
x"0b020b00",
x"01000102",
x"0a090000",
x"06001000",
x"0a0b0000",
x"06000400",
x"0a0e0000",
x"0b020e00",
x"0d010200",
x"0a0d0100",
x"0b010b00",
x"0b020d00",
x"02000102",
x"0a0c0000",
x"0b010900",
x"0b020c00",
x"01000102",
x"0a0a0000",
x"06002000",
x"0a0c0000",
x"06000500",
x"0a0f0000",
x"0b020f00",
x"0d010200",
x"0a0e0100",
x"0b010c00",
x"0b020e00",
x"02000102",
x"0a0d0000",
x"0b010a00",
x"0b020d00",
x"01000102",
x"0a0b0000",
x"06004000",
x"0a0d0000",
x"06000600",
x"0a100000",
x"0b021000",
x"0d010200",
x"0a0f0100",
x"0b010d00",
x"0b020f00",
x"02000102",
x"0a0e0000",
x"0b010b00",
x"0b020e00",
x"01000102",
x"0a0c0000",
x"06008000",
x"0a0e0000",
x"06000700",
x"0a110000",
x"0b021100",
x"0d010200",
x"0a100100",
x"0b010e00",
x"0b021000",
x"02000102",
x"0a0f0000",
x"0b010c00",
x"0b020f00",
x"01000102",
x"0a0d0000",
x"0b010d00",
x"0a050100",
x"0b010500",
x"0b020300",
x"03000102",
x"0a060000",
x"0b030600",
x"09000300",
x"08c00000",
x"06000200",
x"0a060000",
x"06006600",
x"0a070000",
x"0b070600",
x"0b080700",
x"0c000807",
x"07c70000",
x"06000200",
x"0a060000",
x"0600ff00",
x"0a070000",
x"0b070600",
x"0b080700",
x"0c000807",
x"06000100",
x"0a060000",
x"0b070600",
x"0b080300",
x"0c000807",
x"07080000",


others=>(others=>'0'));
begin
    --process
    --begin
--        Dout <= x"deadbeef"; --AKA steak hachÃ©
        --wait until CLK'event and CLK = '1';
        Dout <= mem(TO_INTEGER(unsigned(addr)));
    --end process;
end Behavioral;
